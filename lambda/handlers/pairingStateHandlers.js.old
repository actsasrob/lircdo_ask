var Alexa = require('alexa-sdk');

// Constants
var constants = require('../constants/constants');

// Application Pairing Handlers
var pairingStateHandlers = Alexa.CreateStateHandler(constants.states.PAIRING, {

  'NewSession': function () {
    console.log('pairingStateHandlers.NewSession');
    // Check for application FQDN address data in Session Attributes
    var applicationFQDN = this.attributes['applicationFQDN'];
    if (applicationFQDN) {
      // Change State to MAIN:
      this.handler.state = constants.states.MAIN;
      this.emitWithState('LaunchRequest');
    } else {
      // Welcome User for the First Time
      this.emit(':ask', 'Welcome to lirc do! The skill that lets you perform various home automation tasks using linux IR remote control, or lirc, in your home by using an IR enabled device such as a raspberry pi. But first, I need to pair your LIRC server. Tell me the IP address or your application by saying: My application address is, and then your application IP address.', 'Tell me the IP address or your application by saying: My application address is, and then your application IP address.');
    }
  },

  'NameCapture': function () {
    console.log('pairingStateHandlers.NameCapture');
    // Get Slot Values
    var USFirstNameSlot = this.event.request.intent.slots.USFirstName.value;

    // Get Name
    var name;
    if (USFirstNameSlot) {
      name = USFirstNameSlot;
    } else if (UKFirstNameSlot) {
      name = UKFirstNameSlot;
    }

    // Save Name in Session Attributes
    if (name) {
      this.attributes['userName'] = name;

      // Change State to Main:
      this.handler.state = constants.states.MAIN;

      //this.emit(':ask', `Ok ${userName}! you can ask me to perform various LIRC actions.  What would you like to do?`, `What would you like to do?`);
      this.emit(':ask', `Ok ${name}! you can ask me to perform various LIRC actions.  What would you like to do?`, `What would you like to do?`);
    } else {
      this.emit(':ask', `Sorry, I didn\'t recognise that name!`, `'Tell me your name by saying: My name is, and then your name.'`);
    }
  },

  'application_address_intent': function () {

    //delegate to Alexa to collect all the required slot values
    //var filledSlots = delegateDialog.delegateSlotCollection.call(this);
    //var filledSlots = delegateDialog.delegateSlotCollection.call(this);
    console.log("lircdo: "+this.event.request.dialogState);
    if (this.event.request.dialogState === "STARTED") {
       console.log("in Beginning");
       var updatedIntent=this.event.request.intent;
       //optionally pre-fill slots: update the intent object with slot values for which
       //you have defaults, then return Dialog.Delegate with this updated intent
       // in the updatedIntent property
       this.emit(":delegate", updatedIntent);
    } else if (this.event.request.dialogState !== "COMPLETED") {
       console.log("in not completed");
       // return a Dialog.Delegate directive with no updatedIntent property.
       this.emit(":delegate");
    } else {
       console.log("lircdo: in completed");
       console.log("lircdo: returning: "+ JSON.stringify(this.event.request.intent));
       // Dialog is now complete and all required slots should be filled,
       // so call your normal intent handler.
       var params = {shared_secret: callback_app.SHARED_SECRET};

       // Get Slot Values
       var lircAction = delegateDialog.slotValue(this.event.request.intent.slots.LircAction, true);
       var lircComponent = delegateDialog.slotValue(this.event.request.intent.slots.LircComponent, true);
       if (lircComponent) {
         params.lircComponent = lircComponent;
       }
       if (lircAction) {
          params.lircAction = lircAction;
       }
       console.log('lircdo: invoking callback lircdo_ask with params: ', params);
       serverAPI.invoke_callback('lircdo_ask', params)
         .then((responseDetails) => {
           console.log('lircdo: responseDetails', JSON.stringify(responseDetails));
           // Respond to user with action status
           this.response.speak(`Action status was ${responseDetails.status} with message ${responseDetails.message}`).listen('What next?');
           this.emit(":responseReady");
           // Respond to user with action status
           //this.emit(':ask', `Action status was ${responseDetails.status} with message ${responseDetails.message}, What next?`, 'What next?');
         })
         .catch((error) => {
           console.log('lircdo ERROR', error);
           this.emit(':tell' `Sorry, there was a problem performing the requested action.`);
         });

    }
  },
  'AMAZON.StopIntent': function () {
    // State Automatically Saved with :tell
    this.emit(':tell', `Goodbye.`);
  },
  'AMAZON.CancelIntent': function () {
    // State Automatically Saved with :tell
    this.emit(':tell', `Goodbye.`);
  },
  'SessionEndedRequest': function () {
    // Force State Save When User Times Out
    this.emit(':saveState', true);
  },

  'AMAZON.HelpIntent' : function () {
    console.log('onboardingStateHander.HelpIntent');
    // User Name Attribute
    var userName = this.attributes['userName'];

    if (userName) {
      this.emit(':ask', `Help Intent What action would you like to perform`, `Help Intent What action would you like to perform`);
    } else {
      this.emit(':ask', 'Please tell me your name by saying: My name is, and then your name.', 'Tell me your name by saying: My name is, and then your name.');
    }
  },

  'Unhandled' : function () {
    this.emitWithState('AMAZON.HelpIntent');
  }

});

module.exports = onboardingStateHandlers;
